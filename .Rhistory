}
}
cat(empty.list)
sum <- sapply(empty.list, sum)
cat(sum)
}
find.sum(10)
find.sum <- function(num){
empty.list <- c()
# numbers <- c(1:num)
for(x in 1:num){
if(x %% 3 == 0 || x %% 5 == 0){
empty.list <- append(empty.list, x)
}
}
# cat(empty.list)
sum <- sapply(empty.list, sum)
cat(sum)
}
find.sum(10)
find.sum <- function(num){
empty.list <- c()
# numbers <- c(1:num)
for(x in 1:num){
if(x %% 3 == 0 || x %% 5 == 0){
empty.list <- append(empty.list, x)
}
}
# cat(empty.list)
sum <- lapply(empty.list, length(empty.list))
cat(sum)
}
find.sum(10)
find.sum <- function(num){
empty.list <- c()
# numbers <- c(1:num)
for(x in 1:num){
if(x %% 3 == 0 || x %% 5 == 0){
empty.list <- append(empty.list, x)
}
}
# cat(empty.list)
sum <- sum(empty.list)
cat(sum)
}
find.sum(10)
find.sum(999)
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
x <- 0
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
x <- 1
while(x < 100){
x <- x + x
print(x)
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
x <- 1
while(x < 100){
y <- x
x <- y + x
print(x)
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
length(new.list)
new.list[length(new.list)]
new.list[-1]
new.list[-2]
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 100){
new.list <- append(new.list[-1] + new.list[-2])
}
new.list
while(new.list[length(new.list)] < 100){
new.list <- append(new.list, new.list[-1] + new.list[-2])
}
new.list
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
new.list <- append(new.list, new.list[-1] + new.list[-2])
print(new.list)
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
new.list <- append(new.list, new.list[-1] + new.list[-2])
cat(new.list)
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
new.list <- append(new.list, new.list[-1] + new.list[-2])
cat(new.list, "\n")
}
while(new.list[length(new.list)] < 10){
new.list <- append(new.list, (new.list[-1] + new.list[-2]))
cat(new.list, "\n")
}
new.list
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
new.list <- append(new.list, (new.list[-1] + new.list[-2]))
cat(new.list, "\n")
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
cat(new.list[-1], new.list[-2], "\n")
new.list <- append(new.list, (new.list[-1] + new.list[-2]))
cat(new.list, "\n\n")
}
# cat(new.list[-1], new.list[-2], "\n")
cat(new.list[-1] + new.list[-2])
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
# cat(new.list[-1], new.list[-2], "\n")
cat(new.list[-1] + new.list[-2])
new.list <- append(new.list, (new.list[-1] + new.list[-2]))
cat(new.list, "\n\n")
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
# cat(new.list[-1], new.list[-2], "\n")
cat(new.list[-1] + new.list[-2])
new.list <- append(new.list, (new.list[-1] + new.list[-2]))
# cat(new.list, "\n\n")
}
new.list
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
# cat(new.list[-1], new.list[-2], "\n")
cat(new.list[-1] + new.list[-2], "\n")
new.list <- append(new.list, (new.list[-1] + new.list[-2]))
# cat(new.list, "\n\n")
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
# cat(new.list[-1], new.list[-2], "\n")
# cat(new.list[-1] + new.list[-2], "\n")
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
# cat(new.list, "\n\n")
}
new.list
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
cat(new.list, "\n\n")
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
cat(new.list, "\n")
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
cat(new.list, "\n")
}
new.list
total <- 0
for(num in new.list){
if(num %% 2 == 0){
total <- total + num
}
}
total
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(1, 2)
while(new.list[length(new.list)] < 10){
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
cat(new.list, "\n")
}
new.list
total <- 0
for(num in new.list){
if(num %% 2 == 0){
total <- total + num
}
}
total
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(1, 2)
while(new.list[length(new.list)] < 4000000){
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
cat(new.list, "\n")
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(1, 2)
while(new.list[length(new.list)] < 4000000){
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
# cat(new.list, "\n")
}
new.list
total <- 0
for(num in new.list){
if(num %% 2 == 0){
total <- total + num
}
}
total
# Using recursion
fibonacci <- function(num){
if(num == 1 || num == 0){
return
}
return fibonacci(num - 1 + num - 2)
}
# Using recursion
fibonacci <- function(num){
if(num == 1 || num == 0){
return
}
return (fibonacci(num - 1 + num - 2))
}
fibonacci(10)
# Using recursion
fibonacci <- function(num){
if(num == 1 || num == 0){
return
}
return (fibonacci(num - 1) + fibonacci(num - 2))
}
fibonacci(10)
# Using recursion
fibonacci <- function(num){
if(num == 1 || num == 0){
return(num)
}
return (fibonacci(num - 1) + fibonacci(num - 2))
}
fibonacci(10)
# Using recursion
fibonacci <- function(num){
if(num == 1 || num == 0){
return(num)
}
return (fibonacci(num - 1) + fibonacci(num - 2))
}
fibonacci(3)
# set working directory
setwd("C:/Users/samma/Monkeypox-genetics/")
cat(getwd())
list.files()
# set working directory
setwd("C:/Users/samma/Monkeypox-genetics/")
cat(getwd())
list.files()
# set working directory
setwd("C:/Users/samma/Monkeypox-genetics/")
cat(getwd())
list.files()
# set working directory
setwd("C:/Users/samma/Monkeypox-genetics/")
cat(getwd())
list.files()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("msa")
library(msa)
library(RColorBrewer)
library(rentrez)
library(stringdist)
library(seqinr)
# getwd()
sourceIDs <- read.csv(file = "C:/Users/samma/Monkeypox-genetics/data/monkeypox_annotation.txt", sep = "\t", header = TRUE, row.names = 1)
# check the dataframe
head(sourceIDs)
str(sourceIDs)
mydata <- entrez_fetch("nucleotide", rownames(sourceIDs)[1], rettype = "fasta")
cat(class(mydata), "\n")
cat(str(mydata))
rm
mydata <- entrez_fetch("nucleotide", rownames(sourceIDs)[1], rettype = "fasta")
library(msa)
library(RColorBrewer)
library(rentrez)
library(stringdist)
library(seqinr)
# getwd()
sourceIDs <- read.csv(file = "C:/Users/samma/Monkeypox-genetics/data/monkeypox_annotation.txt", sep = "\t", header = TRUE, row.names = 1)
# check the dataframe
head(sourceIDs)
str(sourceIDs)
mydata <- entrez_fetch("nucleotide", rownames(sourceIDs)[1], rettype = "fasta")
cat(class(mydata), "\n")
cat(str(mydata))
cat(class(mydata), "\n\n")
cat(str(mydata))
cat(class(mydata), "\n\n")
cat(str(mydata), "\n\n")
cat(len(mydata), "\n\n")
cat(class(mydata), "\n\n")
cat(str(mydata), "\n\n")
cat(length(mydata), "\n\n")
cat(class(mydata), "\n\n")
cat(str(mydata), "\n\n")
cat(length(mydata))
strsplit(rseq)
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1], rettype = "fasta")
cat(class(rseq), "\n\n")
cat(str(rseq), "\n\n")
cat(length(rseq))
strsplit(rseq)
strsplit(rseq, "\n")
strsplit(rseq, "\n")[1:10]
# strsplit(rseq, "\n")
unlist(strsplit(rseq, "\n"))[1:5]
cat(type(unlist(strsplit(rseq, "\n"))[1:5]))
cat(class(unlist(strsplit(rseq, "\n"))[1:5]))
cat(class(strsplit(rseq, "\n")[1:5]))
cat(class(unlist(strsplit(rseq, "\n"))[1:5]))
cat(class(strsplit(rseq, "\n")[1:5]), "\n")
cat(class(unlist(strsplit(rseq, "\n"))[1:5]))
?grep
rseq <- unlist(strsplit(rseq, "\n"))[1:5]
header.lines <- grep(">", rseq)
header.lines
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1], rettype = "fasta")
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1], rettype = "fasta")
Check the data.
```{r}
cat(class(rseq), "\n\n")
cat(str(rseq), "\n\n")
cat(length(rseq))
```
Make the output readable using strsplit() and unlist():
```{r}
cat(class(strsplit(rseq, "\n")[1:5]), "\n")
cat(class(unlist(strsplit(rseq, "\n"))[1:5]))
```
Use [`grep`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/grep) function to find the header row.
```{r}
rseq <- unlist(strsplit(rseq, "\n"))[1:5]
header.lines <- grep(">", rseq)
header.lines
```
Check the data.
```{r}
cat(class(rseq), "\n\n")
cat(str(rseq), "\n\n")
cat(length(rseq))
```
Make the output readable using strsplit() and unlist():
```{r}
cat(class(strsplit(rseq, "\n")[1:5]), "\n")
cat(class(unlist(strsplit(rseq, "\n"))[1:5]))
```
Use [`grep`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/grep) function to find the header row.
```{r}
rseq <- unlist(strsplit(rseq, "\n"))[1:5]
header.lines <- grep(">", rseq)
header.lines
```
rseq <- unlist(strsplit(rseq, "\n"))[1:5]
header.lines <- grep(">", rseq)
header.lines
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1], rettype = "fasta")
cat(class(rseq), "\n\n")
cat(str(rseq), "\n\n")
rseq <- unlist(strsplit(rseq, "\n"))[1:5]
header.lines <- grep(">", rseq)
header.lines
rseq
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1], rettype = "fasta")
cat(class(rseq), "\n\n")
cat(str(rseq), "\n\n")
cat(class(strsplit(rseq, "\n")[1:5]), "\n")
cat(class(unlist(strsplit(rseq, "\n"))[1:5]))
rseq <- unlist(strsplit(rseq, "\n"))
header.lines <- grep(">", rseq)
header.lines
rseq
rseq[0:5]
rseq <- unlist(strsplit(rseq, "\n"))
rseq[0:5]
# header.lines <- grep(">", rseq)
# header.lines
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1], rettype = "fasta")
rseq[0:5]
rseq <- unlist(strsplit(rseq, "\n"))
rseq[0:5]
# header.lines <- grep(">", rseq)
# header.lines
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1], rettype = "fasta")
# rseq[0:5]
rseq <- unlist(strsplit(rseq, "\n"))
rseq[0:5]
grep(">", rseq)
# header.lines <- grep(">", rseq)
# header.lines
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1:2], rettype = "fasta")
rseq <- unlist(strsplit(rseq, "\n"))
grep(">", rseq)
# header.lines <- grep(">", rseq)
# header.lines
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1:2], rettype = "fasta")
rseq <- unlist(strsplit(rseq, "\n"))
header.lines <- grep(">", rseq)
header.lines
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs), rettype = "fasta")
rseq <- unlist(strsplit(rseq, "\n"))
header.lines <- grep(">", rseq)
header.lines
seq.pos <- cbind(start = header.lines + 1, stop = c(header.lines[-1], length(rseq)))
seq.pos
seq.pos <- cbind(start = header.lines + 1, stop = c(header.lines[-1] - 1, length(rseq)))
seq.pos
# rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1:2], rettype = "fasta")
rseq <- unlist(strsplit(rseq, "\n"))
header.lines <- grep(">", rseq)
header.lines
seq.pos <- cbind(start = header.lines + 1, stop = c(header.lines[-1] - 1, length(rseq)))
seq.pos
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1:2], rettype = "fasta")
rseq <- unlist(strsplit(rseq, "\n"))
header.lines <- grep(">", rseq)
header.lines
seq.pos <- cbind(start = header.lines + 1, stop = c(header.lines[-1] - 1, length(rseq)))
seq.pos
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1:2], rettype = "fasta")
rseq <- unlist(strsplit(rseq, "\n"))
header.lines <- grep(">", rseq)
header.lines
seq.pos <- cbind(start = header.lines + 1, stop = c(header.lines[-1] - 1, length(rseq)))
seq.pos
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1:3], rettype = "fasta")
rseq <- unlist(strsplit(rseq, "\n"))
header.lines <- grep(">", rseq)
header.lines
header.lines[1]
header.lines[-1]
header.lines[1]
header.lines[-1]
header.lines[-1]-1
seq.pos <- cbind(start = header.lines + 1, stop = c(header.lines[-1] - 1, length(rseq)))
seq.pos
header.lines[1]
header.lines[-1]
header.lines[-1]-1
c(header.lines[-1] - 1, length(rseq))
seq.fasta <- lapply(seq.pos, 1, function(x)){
seq.fasta <- apply(seq.pos, 1, function(x){
cat(as.numeric(x["start"]))
})
# Clear environment
rm(list = ls())
# set working directory
setwd("C:/Users/samma/Monkeypox-genetics/")
cat(getwd())
list.files()
## Importing packages
library(msa)
# Clear environment
rm(list = ls())
# set working directory
setwd("C:/Users/samma/Monkeypox-genetics/")
rm -rf .git
gctorture(FALSE)
