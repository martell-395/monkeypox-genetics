}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
cat(new.list[-1], new.list[-2], "\n")
new.list <- append(new.list, (new.list[-1] + new.list[-2]))
cat(new.list, "\n\n")
}
# cat(new.list[-1], new.list[-2], "\n")
cat(new.list[-1] + new.list[-2])
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
# cat(new.list[-1], new.list[-2], "\n")
cat(new.list[-1] + new.list[-2])
new.list <- append(new.list, (new.list[-1] + new.list[-2]))
cat(new.list, "\n\n")
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
# cat(new.list[-1], new.list[-2], "\n")
cat(new.list[-1] + new.list[-2])
new.list <- append(new.list, (new.list[-1] + new.list[-2]))
# cat(new.list, "\n\n")
}
new.list
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
# cat(new.list[-1], new.list[-2], "\n")
cat(new.list[-1] + new.list[-2], "\n")
new.list <- append(new.list, (new.list[-1] + new.list[-2]))
# cat(new.list, "\n\n")
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
# cat(new.list[-1], new.list[-2], "\n")
# cat(new.list[-1] + new.list[-2], "\n")
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
# cat(new.list, "\n\n")
}
new.list
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
cat(new.list, "\n\n")
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
cat(new.list, "\n")
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(0, 1)
while(new.list[length(new.list)] < 10){
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
cat(new.list, "\n")
}
new.list
total <- 0
for(num in new.list){
if(num %% 2 == 0){
total <- total + num
}
}
total
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(1, 2)
while(new.list[length(new.list)] < 10){
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
cat(new.list, "\n")
}
new.list
total <- 0
for(num in new.list){
if(num %% 2 == 0){
total <- total + num
}
}
total
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(1, 2)
while(new.list[length(new.list)] < 4000000){
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
cat(new.list, "\n")
}
# 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By  starting with 1 and 2, the first 10 terms will be:
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed one million, find the  sum of the even-valued terms.
new.list <- c(1, 2)
while(new.list[length(new.list)] < 4000000){
new.list <- append(new.list, (new.list[length(new.list)] + new.list[length(new.list) - 1]))
# cat(new.list, "\n")
}
new.list
total <- 0
for(num in new.list){
if(num %% 2 == 0){
total <- total + num
}
}
total
# Using recursion
fibonacci <- function(num){
if(num == 1 || num == 0){
return
}
return fibonacci(num - 1 + num - 2)
}
# Using recursion
fibonacci <- function(num){
if(num == 1 || num == 0){
return
}
return (fibonacci(num - 1 + num - 2))
}
fibonacci(10)
# Using recursion
fibonacci <- function(num){
if(num == 1 || num == 0){
return
}
return (fibonacci(num - 1) + fibonacci(num - 2))
}
fibonacci(10)
# Using recursion
fibonacci <- function(num){
if(num == 1 || num == 0){
return(num)
}
return (fibonacci(num - 1) + fibonacci(num - 2))
}
fibonacci(10)
# Using recursion
fibonacci <- function(num){
if(num == 1 || num == 0){
return(num)
}
return (fibonacci(num - 1) + fibonacci(num - 2))
}
fibonacci(3)
str(ncbi.seq)
rm(list = ls())
library(msa)
library(RColorBrewer)
library(rentrez)
library(stringdist)
library(seqinr)
sourceIDs <- read.csv(
file = "C:/Users/samma/Monkeypox-genetics/data/monkeypox_annotation.txt",
sep = "\t",
header = TRUE,
row.names = 1
)
# check the dataframe
head(sourceIDs)
rseq <- entrez_fetch("nucleotide", rownames(sourceIDs)[1], rettype = "fasta")
load.genomes <- function(ids){
rseq <- entrez_fetch("nucleotide", ids, rettype = "fasta")
rseq <- unlist(strsplit(rseq, "\n"))
header.lines <- grep(">", rseq)
seq.pos <- cbind(start = header.lines + 1, stop = c(header.lines[-1] - 1, length(rseq)))
seq.fasta <- apply(seq.pos, 1, function(x)
{
paste0(rseq[seq(as.numeric(x["start"]), as.numeric(x["stop"]))], sep = "", collapse = "")
})
names(seq.fasta) <- rseq[header.lines]
return (seq.fasta)
}
ncbi.seq <- load.genomes(rownames(sourceIDs))
class(ncbi.seq)
length(ncbi.seq)
str(ncbi.seq)
colnames(db.test) <- c("names", "seq")
db.test <- read.delim("C:/Users/samma/Monkeypox-genetics/data/ncbi_seq.csv", sep = ",", header = TRUE)
colnames(db.test) <- c("names", "seq")
seq <- unlist(list(db.test["seq"]))
names <- unlist(list(db.test["names"]))
names(sequences) <- names
colnames(db.test) <- c("names", "seq")
seq <- unlist(list(db.test["seq"]))
names <- unlist(list(db.test["names"]))
names(seq) <- names
str(seq)
to.csv(ncbi.seq, "C:/Users/samma/Monkeypox-genetics/data/ncbi_seq_2.csv")
write.csv(ncbi.seq, "C:/Users/samma/Monkeypox-genetics/data/ncbi_seq_2.csv")
links <- entrez_link(dbfrom = "nuccore", id = "NC_003310.1", db = "protein")
links
links
str(links)
links["links"]
links["links"]["nuccore_protein"]
links["links"["nuccore_protein"]]
links$links$nuccore_protein
# links$links$nuccore_protein
links["links"]["nuccore_protein"]
links$links$nuccore_protein
proteins.ids <- links$links$nuccore_protein
proteins.ids
length(proteins.ids)
download.data <- function(ids, db = "nucleotide"){
rseq <- entrez_fetch(db, ids, rettype = "fasta")
rseq <- unlist(strsplit(rseq, "\n"))
header.lines <- grep(">", rseq)
seq.pos <- cbind(start = header.lines + 1, stop = c(header.lines[-1] - 1, length(rseq)))
seq.fasta <- apply(seq.pos, 1, function(x)
{
paste0(rseq[seq(as.numeric(x["start"]), as.numeric(x["stop"]))], sep = "", collapse = "")
})
names(seq.fasta) <- rseq[header.lines]
return (seq.fasta)
}
query.proteins <- function(id = "NC_003310.1"){
links <- entrez_link(dbfrom = "nuccore", id = id, db = "protein")
proteins.ids <- links$links$nuccore_protein
if(length(protein.ids) > 0){
protein.seq <- download.data(protein.ids, "protein")
return(protein.seq)
}
return(NULL)
}
my.proteins <- query.proteins()
query.proteins <- function(id = "NC_003310.1"){
links <- entrez_link(dbfrom = "nuccore", id = id, db = "protein")
proteins.ids <- links$links$nuccore_protein
if(length(proteins.ids) > 0){
proteins.seq <- download.data(protein.ids, "protein")
return(protein.seq)
}
return(NULL)
}
query.proteins <- function(id = "NC_003310.1"){
links <- entrez_link(dbfrom = "nuccore", id = id, db = "protein")
proteins.ids <- links$links$nuccore_protein
if(length(proteins.ids) > 0){
proteins.seq <- download.data(protein.ids, "protein")
return(proteins.seq)
}
return(NULL)
}
my.proteins <- query.proteins()
query.proteins <- function(id = "NC_003310.1"){
links <- entrez_link(dbfrom = "nuccore", id = id, db = "protein")
protein.ids <- links$links$nuccore_protein
if(length(protein.ids) > 0){
protein.seq <- download.data(protein.ids, "protein")
return(protein.seq)
}
return(NULL)
}
my.proteins <- query.proteins()
str(my.proteins)
source("R/downloadData.R")
ncbi.seq <- downloadData.R(rownames(sourceIDs))
# set working directory
setwd("C:/Users/samma/Monkeypox-genetics/")
cat(getwd())
list.files()
source("R/downloadData.R")
ncbi.seq <- downloadData.R(rownames(sourceIDs))
source("R/downloadData.R")
ncbi.seq <- downloadData(rownames(sourceIDs))
source("R/downloadData.R")
ncbi.seq <- downloadData(rownames(sourceIDs))
library(msa)
library(RColorBrewer)
library(rentrez)
library(stringdist)
library(seqinr)
source("R/downloadData.R")
ncbi.seq <- downloadData(rownames(sourceIDs))
sourceIDs <- read.csv(
file = "data/monkeypox_annotation.txt",
sep = "\t",
header = TRUE,
row.names = 1
)
# check the dataframe
head(sourceIDs)
rm(list = ls())
# set working directory
setwd("C:/Users/samma/Monkeypox-genetics/")
cat(getwd())
list.files()
library(msa)
library(RColorBrewer)
library(rentrez)
library(stringdist)
library(seqinr)
sourceIDs <- read.csv(
file = "data/monkeypox_annotation.txt",
sep = "\t",
header = TRUE,
row.names = 1
)
# check the dataframe
head(sourceIDs)
str(sourceIDs)
source("R/downloadData.R")
ncbi.seq <- downloadData(rownames(sourceIDs))
class(ncbi.seq)
length(ncbi.seq)
str(ncbi.seq)
source("R/makeBlastDB.R")
makeBlastDB(ncbi.seq, "data/DNAdb.fsa")
source("R/readBlastDBasCsv.R")
db.test <- readBlastDBasCsv("data/DNAdb.fsa")
source("R/readBlastDBasCsv.R")
db.test <- readBlastDBasCsv("data/DNAdb.fsa")
write.csv(ncbi.seq, "C:/Users/samma/Monkeypox-genetics/data/DNAdb.csv")
write.csv(ncbi.seq, "data/DNAdb.csv")
source("R/readBlastDBasCsv.R")
db.test <- readBlastDBasCsv("data/DNAdb.csv")
str(db.test)
source("R/queryProteins.R")
source("R/queryProteins.R")
my.proteins <- queryProteins()
source("R/queryProteins.R")
my.proteins <- queryProteins()
source("R/queryProteins.R")
my.proteins <- queryProteins()
str(my.proteins)
length(my.proteins)
proteins <- c()
for (name in names(ncbi.seq)){
proteins <- c(proteins, query.proteins(name))
Sys.sleep(5)
}
str(my.proteins)
length(my.proteins)
proteins <- c()
for (name in names(ncbi.seq)){
proteins <- c(proteins, queryProteins(name))
Sys.sleep(5)
}
source("R/queryProteins.R")
my.proteins <- queryProteins()
str(my.proteins)
length(my.proteins)
proteins <- c()
for (name in names(ncbi.seq)){
proteins <- c(proteins, queryProteins(name))
Sys.sleep(5)
}
length(proteins)
row.names(sourceIDs)
proteins <- c()
for (name in row.names(source.IDs)){
proteins <- c(proteins, queryProteins(name))
Sys.sleep(5)
}
proteins <- c()
for (name in row.names(sourceIDs)){
proteins <- c(proteins, queryProteins(name))
Sys.sleep(5)
}
length(protein)
length(proteins)
write.csv(proteins, "data/proteins.csv")
proteins[1]
proteins[1]
str(proteins)
source("R/readBlastDBasCsv.R")
db.test <- readBlastDBasCsv("data/proteins.csv")
str(db.test)
table[names(proteins)]
table(names(proteins))
names.proteins <- unlist(names(proteins))
names.proteins
names.proteins[1:50]
# names.proteins[1:50]
grep("virokin", names.proteins)
grep("virokin", names.proteins)
length(grep("virokin", names.proteins))
names.proteins[1:150]
grep("monoglyercide", names.proteins)
length(grep("monoglyercide", names.proteins))
grep("Monoglyercide", names.proteins)
length(grep("Monoglyercide", names.proteins))
grep("Monoglyceride", names.proteins)
length(grep("Monoglyceride", names.proteins))
names.proteins[1:10]
stringdist(proteins[1], proteins, method = "lv")
which(stringdist(proteins[1], proteins, method = "lv") < 25)
similar <- names(proteins[which(stringdist(proteins[1], proteins, method = "lv") < 15)])
similar
msa(AAstringset(proteins[similar]))
msa(AAStringset(proteins[similar]))
msa(AAStringSet(proteins[similar]))
my.msa <- msa(AAStringSet(proteins[similar]))
msaConsensusSequence(my.msa)
name(protein)[1]
names(proteins)[1]
source("R/makeBlastDB.R")
makeBlastDB(ncbi.seq, "data/DNAdb.fsa")
source("R/makeBlastDB.R")
makeBlastDB(ncbi.seq, "data/DNAdb.fsa")
source("R/makeBlastDB.R")
makeBlastDB(ncbi.seq, "data/DNAdb.fsa")
source("R/makeBlastDB.R")
makeBlastDB(ncbi.seq)
source("~/.active-rstudio-document")
source("R/blast.R")
getwd()
# set working directory
setwd("C:/Users/samma/Monkeypox-genetics/")
cat(getwd())
list.files()
cat(getwd())
# set working directory
setwd("C:/Users/samma/Monkeypox-genetics/")
cat(getwd())
list.files()
cat(getwd())
source("R/blast.R")
cat(getwd())
setwd("C:/Users/samma/Monkeypox-genetics/")
cat(getwd())
source("R/blast.R")
source("R/blast.R")
blast.res <- blast(consensus)
rm(list = ls())
# set working directory
setwd("C:/Users/samma/Monkeypox-genetics/")
cat(getwd())
list.files()
library(msa)
library(RColorBrewer)
library(rentrez)
library(stringdist)
library(seqinr)
sourceIDs <- read.csv(
file = "data/monkeypox_annotation.txt",
sep = "\t",
header = TRUE,
row.names = 1
)
# check the dataframe
head(sourceIDs)
source("R/readBlastDBasCsv.R")
db.test <- readBlastDBasCsv("data/DNAdb.csv")
str(db.test)
source("R/readBlastDBasCsv.R")
ncbi.seq <- readBlastDBasCsv("data/DNAdb.csv")
str(ncbi.seq)
source("R/readBlastDBasCsv.R")
proteins <- readBlastDBasCsv("data/proteins.csv")
str(proteins)
similar <- names(proteins[which(stringdist(proteins[1], proteins, method = "lv") < 15)])
similar
my.msa <- msa(AAStringSet(proteins[similar]))
consensus <- msaConsensusSequence(my.msa)
consensus <- msaConsensusSequence(my.msa)
consensus
source("R\makeBlastDB.R")
source("R/makeBlastDB.R")
source("R/queryProteins.R")
source("R/readBlastDBasCsv.R")
source("R/blast.R")
source("R/downloadData.R")
source("R/makeBlastDB.R")
makeBlastDB(ncbi.seq)
source("R/makeBlastDB.R")
makeBlastDB(ncbi.seq)
source("R/blast.R")
blast.res <- blast(consensus)
source("R/makeBlastDB.R")
db <- makeBlastDB(ncbi.seq)
source("R/blast.R")
blast.res <- blast(consensus)
my.consensus <- msaConsensusSequence(my.msa)
my.consensus
source("R/blast.R")
blast.res <- blast(my.consensus)
getwd()
install.packages("devtools")
devtools::install_bioc("Biostrings")
devtools::install_github("mhahsler/rBLAST")
?blast
? blast
?? blast
??blast
? rBlast
? Blast
source("R/blast.R")
blast.res <- blast(my.consensus)
source("R/blast.R")
blast.res <- blast(my.consensus)
